namespace Piranha.Jawbone.Openal
{
    public static class Al
    {
        public const uint None = 0; // AL_NONE
        public const uint False = 0; // AL_FALSE
        public const uint True = 1; // AL_TRUE
        public const uint SourceRelative = 0x202; // AL_SOURCE_RELATIVE
        public const uint ConeInnerAngle = 0x1001; // AL_CONE_INNER_ANGLE
        public const uint ConeOuterAngle = 0x1002; // AL_CONE_OUTER_ANGLE
        public const uint Pitch = 0x1003; // AL_PITCH
        public const uint Position = 0x1004; // AL_POSITION
        public const uint Direction = 0x1005; // AL_DIRECTION
        public const uint Velocity = 0x1006; // AL_VELOCITY
        public const uint Looping = 0x1007; // AL_LOOPING
        public const uint Buffer = 0x1009; // AL_BUFFER
        public const uint Gain = 0x100A; // AL_GAIN
        public const uint MinGain = 0x100D; // AL_MIN_GAIN
        public const uint MaxGain = 0x100E; // AL_MAX_GAIN
        public const uint Orientation = 0x100F; // AL_ORIENTATION
        public const uint SourceState = 0x1010; // AL_SOURCE_STATE
        public const uint Initial = 0x1011; // AL_INITIAL
        public const uint Playing = 0x1012; // AL_PLAYING
        public const uint Paused = 0x1013; // AL_PAUSED
        public const uint Stopped = 0x1014; // AL_STOPPED
        public const uint BuffersQueued = 0x1015; // AL_BUFFERS_QUEUED
        public const uint BuffersProcessed = 0x1016; // AL_BUFFERS_PROCESSED
        public const uint ReferenceDistance = 0x1020; // AL_REFERENCE_DISTANCE
        public const uint RolloffFactor = 0x1021; // AL_ROLLOFF_FACTOR
        public const uint ConeOuterGain = 0x1022; // AL_CONE_OUTER_GAIN
        public const uint MaxDistance = 0x1023; // AL_MAX_DISTANCE
        public const uint SecOffset = 0x1024; // AL_SEC_OFFSET
        public const uint SampleOffset = 0x1025; // AL_SAMPLE_OFFSET
        public const uint ByteOffset = 0x1026; // AL_BYTE_OFFSET
        public const uint SourceType = 0x1027; // AL_SOURCE_TYPE
        public const uint Static = 0x1028; // AL_STATIC
        public const uint Streaming = 0x1029; // AL_STREAMING
        public const uint Undetermined = 0x1030; // AL_UNDETERMINED
        public const uint FormatMono8 = 0x1100; // AL_FORMAT_MONO8
        public const uint FormatMono16 = 0x1101; // AL_FORMAT_MONO16
        public const uint FormatStereo8 = 0x1102; // AL_FORMAT_STEREO8
        public const uint FormatStereo16 = 0x1103; // AL_FORMAT_STEREO16
        public const uint Frequency = 0x2001; // AL_FREQUENCY
        public const uint Bits = 0x2002; // AL_BITS
        public const uint Channels = 0x2003; // AL_CHANNELS
        public const uint Size = 0x2004; // AL_SIZE
        public const uint Unused = 0x2010; // AL_UNUSED
        public const uint Pending = 0x2011; // AL_PENDING
        public const uint Processed = 0x2012; // AL_PROCESSED
        public const uint NoError = 0; // AL_NO_ERROR
        public const uint InvalidName = 0xA001; // AL_INVALID_NAME
        public const uint InvalidEnum = 0xA002; // AL_INVALID_ENUM
        public const uint InvalidValue = 0xA003; // AL_INVALID_VALUE
        public const uint InvalidOperation = 0xA004; // AL_INVALID_OPERATION
        public const uint OutOfMemory = 0xA005; // AL_OUT_OF_MEMORY
        public const uint Vendor = 0xB001; // AL_VENDOR
        public const uint Version = 0xB002; // AL_VERSION
        public const uint Renderer = 0xB003; // AL_RENDERER
        public const uint Extensions = 0xB004; // AL_EXTENSIONS
        public const uint DopplerFactor = 0xC000; // AL_DOPPLER_FACTOR
        public const uint DopplerVelocity = 0xC001; // AL_DOPPLER_VELOCITY
        public const uint SpeedOfSound = 0xC003; // AL_SPEED_OF_SOUND
        public const uint DistanceModel = 0xD000; // AL_DISTANCE_MODEL
        public const uint InverseDistance = 0xD001; // AL_INVERSE_DISTANCE
        public const uint InverseDistanceClamped = 0xD002; // AL_INVERSE_DISTANCE_CLAMPED
        public const uint LinearDistance = 0xD003; // AL_LINEAR_DISTANCE
        public const uint LinearDistanceClamped = 0xD004; // AL_LINEAR_DISTANCE_CLAMPED
        public const uint ExponentDistance = 0xD005; // AL_EXPONENT_DISTANCE
        public const uint ExponentDistanceClamped = 0xD006; // AL_EXPONENT_DISTANCE_CLAMPED
    }
}
