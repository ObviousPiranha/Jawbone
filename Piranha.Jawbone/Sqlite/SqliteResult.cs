namespace Piranha.Jawbone.Sqlite;

public static class SqliteResult
{
    public const int Ok = 0;
    public const int Error = 1;
    public const int Internal = 2;
    public const int PermissionDenied = 3;
    public const int Abort = 4;
    public const int Busy = 5;
    public const int Locked = 6;
    public const int NoMemory = 7;
    public const int ReadOnly = 8;
    public const int Interrupt = 9;
    public const int IoError = 10;
    public const int Corrupt = 11;
    public const int NotFound = 12;
    public const int DatabaseFull = 13;
    public const int CannotOpen = 14;
    public const int LockProtocolError = 15;
    public const int Empty = 16;
    public const int SchemaChanged = 17;
    public const int StringOrBlobTooBig = 18;
    public const int ConstraintViolation = 19;
    public const int DataTypeMismatch = 20;
    public const int LibraryMisuse = 21;
    public const int NoLfs = 22;
    public const int AuthorizationDenied = 23;
    public const int Format = 24;
    public const int BindParameterOutOfRange = 25;
    public const int NotADatabase = 26;
    public const int Notice = 27;
    public const int Warning = 28;
    public const int RowReady = 100;
    public const int Done = 101;

    // Extended Error Codes
    public const int ERROR_MISSING_COLLSEQ = Error | (1 << 8);
    public const int ERROR_RETRY = Error | (2 << 8);
    public const int IOERR_READ = IoError | (1 << 8);
    public const int IOERR_SHORT_READ = IoError | (2 << 8);
    public const int IOERR_WRITE = IoError | (3 << 8);
    public const int IOERR_FSYNC = IoError | (4 << 8);
    public const int IOERR_DIR_FSYNC = IoError | (5 << 8);
    public const int IOERR_TRUNCATE = IoError | (6 << 8);
    public const int IOERR_FSTAT = IoError | (7 << 8);
    public const int IOERR_UNLOCK = IoError | (8 << 8);
    public const int IOERR_RDLOCK = IoError | (9 << 8);
    public const int IOERR_DELETE = IoError | (10 << 8);
    public const int IOERR_BLOCKED = IoError | (11 << 8);
    public const int IOERR_NOMEM = IoError | (12 << 8);
    public const int IOERR_ACCESS = IoError | (13 << 8);
    public const int IOERR_CHECKRESERVEDLOCK = IoError | (14 << 8);
    public const int IOERR_LOCK = IoError | (15 << 8);
    public const int IOERR_CLOSE = IoError | (16 << 8);
    public const int IOERR_DIR_CLOSE = IoError | (17 << 8);
    public const int IOERR_SHMOPEN = IoError | (18 << 8);
    public const int IOERR_SHMSIZE = IoError | (19 << 8);
    public const int IOERR_SHMLOCK = IoError | (20 << 8);
    public const int IOERR_SHMMAP = IoError | (21 << 8);
    public const int IOERR_SEEK = IoError | (22 << 8);
    public const int IOERR_DELETE_NOENT = IoError | (23 << 8);
    public const int IOERR_MMAP = IoError | (24 << 8);
    public const int IOERR_GETTEMPPATH = IoError | (25 << 8);
    public const int IOERR_CONVPATH = IoError | (26 << 8);
    public const int IOERR_VNODE = IoError | (27 << 8);
    public const int IOERR_AUTH = IoError | (28 << 8);
    public const int IOERR_BEGIN_ATOMIC = IoError | (29 << 8);
    public const int IOERR_COMMIT_ATOMIC = IoError | (30 << 8);
    public const int IOERR_ROLLBACK_ATOMIC = IoError | (31 << 8);
    public const int LOCKED_SHAREDCACHE = Locked | (1 << 8);
    public const int BUSY_RECOVERY = Busy | (1 << 8);
    public const int BUSY_SNAPSHOT = Busy | (2 << 8);
    public const int CANTOPEN_NOTEMPDIR = CannotOpen | (1 << 8);
    public const int CANTOPEN_ISDIR = CannotOpen | (2 << 8);
    public const int CANTOPEN_FULLPATH = CannotOpen | (3 << 8);
    public const int CANTOPEN_CONVPATH = CannotOpen | (4 << 8);
    public const int CORRUPT_VTAB = Corrupt | (1 << 8);
    public const int READONLY_RECOVERY = ReadOnly | (1 << 8);
    public const int READONLY_CANTLOCK = ReadOnly | (2 << 8);
    public const int READONLY_ROLLBACK = ReadOnly | (3 << 8);
    public const int READONLY_DBMOVED = ReadOnly | (4 << 8);
    public const int READONLY_CANTINIT = ReadOnly | (5 << 8);
    public const int READONLY_DIRECTORY = ReadOnly | (6 << 8);
    public const int ABORT_ROLLBACK = Abort | (2 << 8);
    public const int CONSTRAINT_CHECK = ConstraintViolation | (1 << 8);
    public const int CONSTRAINT_COMMITHOOK = ConstraintViolation | (2 << 8);
    public const int CONSTRAINT_FOREIGNKEY = ConstraintViolation | (3 << 8);
    public const int CONSTRAINT_FUNCTION = ConstraintViolation | (4 << 8);
    public const int CONSTRAINT_NOTNULL = ConstraintViolation | (5 << 8);
    public const int CONSTRAINT_PRIMARYKEY = ConstraintViolation | (6 << 8);
    public const int CONSTRAINT_TRIGGER = ConstraintViolation | (7 << 8);
    public const int CONSTRAINT_UNIQUE = ConstraintViolation | (8 << 8);
    public const int CONSTRAINT_VTAB = ConstraintViolation | (9 << 8);
    public const int CONSTRAINT_ROWID = ConstraintViolation | (10 << 8);
    public const int NOTICE_RECOVER_WAL = Notice | (1 << 8);
    public const int NOTICE_RECOVER_ROLLBACK = Notice | (2 << 8);
    public const int WARNING_AUTOINDEX = Warning | (1 << 8);
    public const int AUTH_USER = AuthorizationDenied | (1 << 8);
    public const int OK_LOAD_PERMANENTLY = Ok | (1 << 8);
}
